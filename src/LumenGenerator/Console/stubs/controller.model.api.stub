<?php

namespace DummyNamespace;

use App\Http\Requests\DummyPluralModelName\DeleteDummyModelClass;
use App\Http\Requests\DummyPluralModelName\GetDummyModelClassList;
use App\Http\Requests\DummyPluralModelName\GetDummyModelClass;
use App\Http\Requests\DummyPluralModelName\StoreDummyModelClass;
use App\Http\Requests\DummyPluralModelName\UpdateDummyModelClass;
use DummyFullModelClass;
use DummyRootNamespaceHttp\Controllers\Controller;

/**
* @group DummyPluralModelName
*/
class DummyClass extends Controller {
    protected $lazyLoad = [];

    /**
     * Create a new instance.
     *
     * @return void
     */
    public function __construct() {
        $this->middleware('auth:admin', ['except' => []]);
        $this->lazyLoad = [];
    }

    /**
     * Display a listing of the DummyPluralModelVariable.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(GetDummyModelClassList $request) {
        $DummyPluralModelVariable = DummyModelClass::withTrashed($request->get('trashed', false))->get();
        return $this->sendResponse($DummyPluralModelVariable->load($this->lazyLoad), 'Retrieved successfully');
    }

    /**
     * Store a newly created DummyModelVariable in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(StoreDummyModelClass $request) {
        $inputs = $request->validated();
        $DummyModelVariable = DummyModelClass::create($inputs);
        return $this->sendResponse($DummyModelVariable->load($this->lazyLoad), 'Stored successfully');
    }

    /**
     * Display the specified DummyModelVariable.
     *
     * @param  \App\Models\DummyModelClass  $DummyPluralModelVariable
     * @return \Illuminate\Http\Response
     */
    public function show(GetDummyModelClass $request, $id) {
        $DummyModelVariable = DummyModelClass::findOrFail($id);
        return $this->sendResponse($DummyModelVariable->load($this->lazyLoad), 'Retrieved successfully');
    }

    /**
     * Update the specified DummyModelVariable in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\DummyModelClass  $DummyPluralModelVariable
     * @return \Illuminate\Http\Response
     */
    public function update(UpdateDummyModelClass $request, $id) {
        $DummyModelVariable = DummyModelClass::withTrashed()->findOrFail($id);
        if ($request->get('restore', false)) {
            $DummyModelVariable->restore();
        } else {
            $inputs = $request->validated();
            $DummyModelVariable->update($inputs);
        }
        return $this->sendResponse($DummyModelVariable->load($this->lazyLoad), 'Updated successfully');
    }

    /**
     * Remove the specified DummyModelVariable from storage.
     *
     * @param  \App\Models\DummyModelClass  $DummyPluralModelVariable
     * @return \Illuminate\Http\Response
     */
    public function destroy(DeleteDummyModelClass $request, $id) {
        $DummyModelVariable = DummyModelClass::withTrashed()->findOrFail($id);
        if ($request->get('force', false)) {
            $DummyModelVariable->forceDelete();
        } else {
            $DummyModelVariable->delete();
        }
        return $this->sendResponse($DummyModelVariable, 'Deleted successfully');
    }
}